#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;


namespace DAL { 
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Blog")]
public partial class DataClassesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Definiciones de métodos de extensibilidad
  partial void OnCreated();
  partial void InsertCategoria(Categoria instance);
  partial void UpdateCategoria(Categoria instance);
  partial void DeleteCategoria(Categoria instance);
  partial void InsertImagen(Imagen instance);
  partial void UpdateImagen(Imagen instance);
  partial void DeleteImagen(Imagen instance);
  partial void InsertPublicacion(Publicacion instance);
  partial void UpdatePublicacion(Publicacion instance);
  partial void DeletePublicacion(Publicacion instance);
  partial void InsertUsuario(Usuario instance);
  partial void UpdateUsuario(Usuario instance);
  partial void DeleteUsuario(Usuario instance);
  #endregion
	
	public DataClassesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BlogConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Categoria> Categoria
	{
		get
		{
			return this.GetTable<Categoria>();
		}
	}
	
	public System.Data.Linq.Table<Imagen> Imagen
	{
		get
		{
			return this.GetTable<Imagen>();
		}
	}
	
	public System.Data.Linq.Table<Publicacion> Publicacion
	{
		get
		{
			return this.GetTable<Publicacion>();
		}
	}
	
	public System.Data.Linq.Table<Usuario> Usuario
	{
		get
		{
			return this.GetTable<Usuario>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categoria")]
public partial class Categoria : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _IDCategoria;
	
	private string _Nombre;
	
	private string _Etiquetas;
	
	private EntitySet<Publicacion> _Publicacion;
	
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCategoriaChanging(long value);
    partial void OnIDCategoriaChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnEtiquetasChanging(string value);
    partial void OnEtiquetasChanged();
    #endregion
	
	public Categoria()
	{
		this._Publicacion = new EntitySet<Publicacion>(new Action<Publicacion>(this.attach_Publicacion), new Action<Publicacion>(this.detach_Publicacion));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategoria", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long IDCategoria
	{
		get
		{
			return this._IDCategoria;
		}
		set
		{
			if ((this._IDCategoria != value))
			{
				this.OnIDCategoriaChanging(value);
				this.SendPropertyChanging();
				this._IDCategoria = value;
				this.SendPropertyChanged("IDCategoria");
				this.OnIDCategoriaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="NVarChar(50)")]
	public string Nombre
	{
		get
		{
			return this._Nombre;
		}
		set
		{
			if ((this._Nombre != value))
			{
				this.OnNombreChanging(value);
				this.SendPropertyChanging();
				this._Nombre = value;
				this.SendPropertyChanged("Nombre");
				this.OnNombreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Etiquetas", DbType="NVarChar(50)")]
	public string Etiquetas
	{
		get
		{
			return this._Etiquetas;
		}
		set
		{
			if ((this._Etiquetas != value))
			{
				this.OnEtiquetasChanging(value);
				this.SendPropertyChanging();
				this._Etiquetas = value;
				this.SendPropertyChanged("Etiquetas");
				this.OnEtiquetasChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categoria_Publicacion", Storage="_Publicacion", ThisKey="IDCategoria", OtherKey="IDCategoria")]
	public EntitySet<Publicacion> Publicacion
	{
		get
		{
			return this._Publicacion;
		}
		set
		{
			this._Publicacion.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Publicacion(Publicacion entity)
	{
		this.SendPropertyChanging();
		entity.Categoria = this;
	}
	
	private void detach_Publicacion(Publicacion entity)
	{
		this.SendPropertyChanging();
		entity.Categoria = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Imagen")]
public partial class Imagen : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _IDImagen;
	
	private System.Data.Linq.Binary _Imagen1;
	
	private System.Nullable<long> _IDpublicacion;
	
	private EntityRef<Publicacion> _Publicacion;
	
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDImagenChanging(long value);
    partial void OnIDImagenChanged();
    partial void OnImagen1Changing(System.Data.Linq.Binary value);
    partial void OnImagen1Changed();
    partial void OnIDpublicacionChanging(System.Nullable<long> value);
    partial void OnIDpublicacionChanged();
    #endregion
	
	public Imagen()
	{
		this._Publicacion = default(EntityRef<Publicacion>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDImagen", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long IDImagen
	{
		get
		{
			return this._IDImagen;
		}
		set
		{
			if ((this._IDImagen != value))
			{
				this.OnIDImagenChanging(value);
				this.SendPropertyChanging();
				this._IDImagen = value;
				this.SendPropertyChanged("IDImagen");
				this.OnIDImagenChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Imagen", Storage="_Imagen1", DbType="Image", UpdateCheck=UpdateCheck.Never)]
	public System.Data.Linq.Binary Imagen1
	{
		get
		{
			return this._Imagen1;
		}
		set
		{
			if ((this._Imagen1 != value))
			{
				this.OnImagen1Changing(value);
				this.SendPropertyChanging();
				this._Imagen1 = value;
				this.SendPropertyChanged("Imagen1");
				this.OnImagen1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDpublicacion", DbType="BigInt")]
	public System.Nullable<long> IDpublicacion
	{
		get
		{
			return this._IDpublicacion;
		}
		set
		{
			if ((this._IDpublicacion != value))
			{
				if (this._Publicacion.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDpublicacionChanging(value);
				this.SendPropertyChanging();
				this._IDpublicacion = value;
				this.SendPropertyChanged("IDpublicacion");
				this.OnIDpublicacionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publicacion_Imagen", Storage="_Publicacion", ThisKey="IDpublicacion", OtherKey="IDpublicacion", IsForeignKey=true)]
	public Publicacion Publicacion
	{
		get
		{
			return this._Publicacion.Entity;
		}
		set
		{
			Publicacion previousValue = this._Publicacion.Entity;
			if (((previousValue != value) 
						|| (this._Publicacion.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Publicacion.Entity = null;
					previousValue.Imagen.Remove(this);
				}
				this._Publicacion.Entity = value;
				if ((value != null))
				{
					value.Imagen.Add(this);
					this._IDpublicacion = value.IDpublicacion;
				}
				else
				{
					this._IDpublicacion = default(Nullable<long>);
				}
				this.SendPropertyChanged("Publicacion");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Publicacion")]
public partial class Publicacion : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private long _IDpublicacion;
	
	private System.DateTime _FechaCreacion;
	
	private string _Texto;
	
	private string _Titulo;
	
	private System.Nullable<long> _IDCategoria;
	
	private string _UsuarioID;
	
	private string _Etiquetas;
	
	private EntitySet<Imagen> _Imagen;
	
	private EntityRef<Categoria> _Categoria;
	
	private EntityRef<Usuario> _Usuario;
	
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDpublicacionChanging(long value);
    partial void OnIDpublicacionChanged();
    partial void OnFechaCreacionChanging(System.DateTime value);
    partial void OnFechaCreacionChanged();
    partial void OnTextoChanging(string value);
    partial void OnTextoChanged();
    partial void OnTituloChanging(string value);
    partial void OnTituloChanged();
    partial void OnIDCategoriaChanging(System.Nullable<long> value);
    partial void OnIDCategoriaChanged();
    partial void OnUsuarioIDChanging(string value);
    partial void OnUsuarioIDChanged();
    partial void OnEtiquetasChanging(string value);
    partial void OnEtiquetasChanged();
    #endregion
	
	public Publicacion()
	{
		this._Imagen = new EntitySet<Imagen>(new Action<Imagen>(this.attach_Imagen), new Action<Imagen>(this.detach_Imagen));
		this._Categoria = default(EntityRef<Categoria>);
		this._Usuario = default(EntityRef<Usuario>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDpublicacion", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public long IDpublicacion
	{
		get
		{
			return this._IDpublicacion;
		}
		set
		{
			if ((this._IDpublicacion != value))
			{
				this.OnIDpublicacionChanging(value);
				this.SendPropertyChanging();
				this._IDpublicacion = value;
				this.SendPropertyChanged("IDpublicacion");
				this.OnIDpublicacionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FechaCreacion", DbType="DateTime NOT NULL")]
	public System.DateTime FechaCreacion
	{
		get
		{
			return this._FechaCreacion;
		}
		set
		{
			if ((this._FechaCreacion != value))
			{
				this.OnFechaCreacionChanging(value);
				this.SendPropertyChanging();
				this._FechaCreacion = value;
				this.SendPropertyChanged("FechaCreacion");
				this.OnFechaCreacionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Texto", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Texto
	{
		get
		{
			return this._Texto;
		}
		set
		{
			if ((this._Texto != value))
			{
				this.OnTextoChanging(value);
				this.SendPropertyChanging();
				this._Texto = value;
				this.SendPropertyChanged("Texto");
				this.OnTextoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titulo", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Titulo
	{
		get
		{
			return this._Titulo;
		}
		set
		{
			if ((this._Titulo != value))
			{
				this.OnTituloChanging(value);
				this.SendPropertyChanging();
				this._Titulo = value;
				this.SendPropertyChanged("Titulo");
				this.OnTituloChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCategoria", DbType="BigInt")]
	public System.Nullable<long> IDCategoria
	{
		get
		{
			return this._IDCategoria;
		}
		set
		{
			if ((this._IDCategoria != value))
			{
				if (this._Categoria.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnIDCategoriaChanging(value);
				this.SendPropertyChanging();
				this._IDCategoria = value;
				this.SendPropertyChanged("IDCategoria");
				this.OnIDCategoriaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsuarioID", DbType="NVarChar(100)")]
	public string UsuarioID
	{
		get
		{
			return this._UsuarioID;
		}
		set
		{
			if ((this._UsuarioID != value))
			{
				if (this._Usuario.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUsuarioIDChanging(value);
				this.SendPropertyChanging();
				this._UsuarioID = value;
				this.SendPropertyChanged("UsuarioID");
				this.OnUsuarioIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Etiquetas", DbType="VarChar(50)")]
	public string Etiquetas
	{
		get
		{
			return this._Etiquetas;
		}
		set
		{
			if ((this._Etiquetas != value))
			{
				this.OnEtiquetasChanging(value);
				this.SendPropertyChanging();
				this._Etiquetas = value;
				this.SendPropertyChanged("Etiquetas");
				this.OnEtiquetasChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Publicacion_Imagen", Storage="_Imagen", ThisKey="IDpublicacion", OtherKey="IDpublicacion")]
	public EntitySet<Imagen> Imagen
	{
		get
		{
			return this._Imagen;
		}
		set
		{
			this._Imagen.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categoria_Publicacion", Storage="_Categoria", ThisKey="IDCategoria", OtherKey="IDCategoria", IsForeignKey=true)]
	public Categoria Categoria
	{
		get
		{
			return this._Categoria.Entity;
		}
		set
		{
			Categoria previousValue = this._Categoria.Entity;
			if (((previousValue != value) 
						|| (this._Categoria.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Categoria.Entity = null;
					previousValue.Publicacion.Remove(this);
				}
				this._Categoria.Entity = value;
				if ((value != null))
				{
					value.Publicacion.Add(this);
					this._IDCategoria = value.IDCategoria;
				}
				else
				{
					this._IDCategoria = default(Nullable<long>);
				}
				this.SendPropertyChanged("Categoria");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Publicacion", Storage="_Usuario", ThisKey="UsuarioID", OtherKey="UsuarioID", IsForeignKey=true)]
	public Usuario Usuario
	{
		get
		{
			return this._Usuario.Entity;
		}
		set
		{
			Usuario previousValue = this._Usuario.Entity;
			if (((previousValue != value) 
						|| (this._Usuario.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Usuario.Entity = null;
					previousValue.Publicacion.Remove(this);
				}
				this._Usuario.Entity = value;
				if ((value != null))
				{
					value.Publicacion.Add(this);
					this._UsuarioID = value.UsuarioID;
				}
				else
				{
					this._UsuarioID = default(string);
				}
				this.SendPropertyChanged("Usuario");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Imagen(Imagen entity)
	{
		this.SendPropertyChanging();
		entity.Publicacion = this;
	}
	
	private void detach_Imagen(Imagen entity)
	{
		this.SendPropertyChanging();
		entity.Publicacion = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Usuario")]
public partial class Usuario : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _UsuarioID;
	
	private string _Contraseña;
	
	private string _Nombre;
	
	private string _Correo_electrónico;
	
	private bool _Administrador;
	
	private EntitySet<Publicacion> _Publicacion;
	
    #region Definiciones de métodos de extensibilidad
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUsuarioIDChanging(string value);
    partial void OnUsuarioIDChanged();
    partial void OnContraseñaChanging(string value);
    partial void OnContraseñaChanged();
    partial void OnNombreChanging(string value);
    partial void OnNombreChanged();
    partial void OnCorreo_electrónicoChanging(string value);
    partial void OnCorreo_electrónicoChanged();
    partial void OnAdministradorChanging(bool value);
    partial void OnAdministradorChanged();
    #endregion
	
	public Usuario()
	{
		this._Publicacion = new EntitySet<Publicacion>(new Action<Publicacion>(this.attach_Publicacion), new Action<Publicacion>(this.detach_Publicacion));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsuarioID", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string UsuarioID
	{
		get
		{
			return this._UsuarioID;
		}
		set
		{
			if ((this._UsuarioID != value))
			{
				this.OnUsuarioIDChanging(value);
				this.SendPropertyChanging();
				this._UsuarioID = value;
				this.SendPropertyChanged("UsuarioID");
				this.OnUsuarioIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contraseña", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string Contraseña
	{
		get
		{
			return this._Contraseña;
		}
		set
		{
			if ((this._Contraseña != value))
			{
				this.OnContraseñaChanging(value);
				this.SendPropertyChanging();
				this._Contraseña = value;
				this.SendPropertyChanged("Contraseña");
				this.OnContraseñaChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nombre", DbType="NVarChar(200)")]
	public string Nombre
	{
		get
		{
			return this._Nombre;
		}
		set
		{
			if ((this._Nombre != value))
			{
				this.OnNombreChanging(value);
				this.SendPropertyChanging();
				this._Nombre = value;
				this.SendPropertyChanged("Nombre");
				this.OnNombreChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Correo_electrónico", DbType="VarChar(500)")]
	public string Correo_electrónico
	{
		get
		{
			return this._Correo_electrónico;
		}
		set
		{
			if ((this._Correo_electrónico != value))
			{
				this.OnCorreo_electrónicoChanging(value);
				this.SendPropertyChanging();
				this._Correo_electrónico = value;
				this.SendPropertyChanged("Correo_electrónico");
				this.OnCorreo_electrónicoChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Administrador", DbType="Bit NOT NULL")]
	public bool Administrador
	{
		get
		{
			return this._Administrador;
		}
		set
		{
			if ((this._Administrador != value))
			{
				this.OnAdministradorChanging(value);
				this.SendPropertyChanging();
				this._Administrador = value;
				this.SendPropertyChanged("Administrador");
				this.OnAdministradorChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Usuario_Publicacion", Storage="_Publicacion", ThisKey="UsuarioID", OtherKey="UsuarioID")]
	public EntitySet<Publicacion> Publicacion
	{
		get
		{
			return this._Publicacion;
		}
		set
		{
			this._Publicacion.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Publicacion(Publicacion entity)
	{
		this.SendPropertyChanging();
		entity.Usuario = this;
	}
	
	private void detach_Publicacion(Publicacion entity)
	{
		this.SendPropertyChanging();
		entity.Usuario = null;
	}
}}
#pragma warning restore 1591
